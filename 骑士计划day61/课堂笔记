1.内容回顾
    1.装饰器
        1.函数名的运用
            1.可以复制给别的变量
            2.可以做函数的参数
            3.可以做函数的返回值
            4.可以做容器对象的元素
        2.闭包
            1.什么是闭包？
                1.一个内层函数包含了对外层函数局部变量的引用，那这个内层函数就构成了闭包
            2.闭包的应用
                1.面试题
                2.装饰器
            3.装饰器   *****
                0.为什么要用装饰器
                    1.开放封闭原则
                    2.不修改函数的调用方式，不改变其源代码还要给他添加新功能
                1.标准的装饰器
                    from functools import wraps
                    from datetime import datetime

                    # func：被装饰的函数
                    def wrapper(func):
                        # 把func指向的函数的__doc__,__name__等属性都复制到inner上面
                        @wraps(func)
                        # args 和 kwargs 是被装饰函数的参数
                        def inner(*args,**kwargs):
                            print(datetime.now().strftime('%Y-%m-%d %H:%M:%S %w'))
                            func()
                            print('新功能也可以写在这')
                        return inner

                    # 此时会执行wrapper，所以wrapper必须定义在这一行
                    @wrapper
                    def hell():
                        print('Hello word')

                    hell()

                2.装饰器进阶 *****
                    1.装饰器带参数的函数
                    2.装饰器带返回值的函数
                    3.装饰器修复技术

                    4.带参数的装饰器（根据传入参数的不同，装饰器会实现不同的效果）
                    5.多个装饰器装饰同一个函数
                3.装饰器究极进阶（了解为主）

2.今日内容
    1.web框架模式
        1.mvc框架
        2.MTV框架
    2.Django的模板语言（HTML文件中的特殊符号）
        1.Django的模板系统是可以更新的（第三方的jinja2）
        2.模板语言变量的用法
            1.变量名和python变量名的命名规则一致
            2.变量用{{变量名}}表示，注意：{和{之间不要加空格
            3.变量不传值默认显示空字符串
            4.取值
                1.字典按key取值
                2.对象.属性/对象.方法
                3.索引取值
        3.filters(对变量做操作)
            1.语法
                1.{{变量名|filter_name}}
                2.{{变量名|filter_name:'参数'}}
            2.常用内置的filter
            3.自定义的filter
                1.自定义的filter的步骤
                    1.在app下面新建一个python package名字叫templatetags
                    2.在上一步的python package中新建一个py文件
                    3.在py文件中写一个函数，实现自定义的filter功能
                    4.告诉Django我现在多了一个自定义的filter
                2.使用自定义的filter
                    1.在HTML文件中导入刚才创建的py文件
                    2.重启Django项目
                    3.按照普通的filter调用自定义的函数

3.今日作业(dateutil)
    1.让用户输入自己的出生年月（2000-10-1）
    2.返回它的年龄（多少年零几个月多少天）
