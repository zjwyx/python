1.内容回顾
    1.视图系统
        1.CBV
            基于类的视图
            from django import views
            class LoginView(views.View):
                def get(self,request):
                    pass

                def post(self,request):
                    pass
        2.FBV

        3.request对象的属性和方法
            1.request.method
            2.request.POST
                1.request.POST.get()
                2.request.POST.getlist()      --> 多选的checkbox和多选的select
            3.request.GET
            4.request.FILES
                1.request.FILES.get()
                2.request.FILES.getlist()

            5.request.path_info              --> 获取当前访问的url路径
            6.request.get_full_path          --> 获取当前访问的url带参数

            7.request.META
            8.request.body

        4.上传文件示例
            1.form表单必须设置method="post" enctype="multipart/form-data"

            2.file_obj = request.FILES.get('xxx')     -->取到上传文件对象
            3.file_obj.name                           -->取到文件名
            4.在本地保存文件
                with open(file_obj.name,'wb') as f:
                    for chunk in file_obj.chunks():
                        f.write(chunk)

    2.路由系统
        1.路由匹配模式的构成
            from djago.conf.urls import url
            url(r'正则表达式','视图函数',{额外的参数},name='参数')
        2.正则表达式部分
            1.完全匹配和模糊匹配
            2.分组匹配和分组命名匹配
                为了将路由中匹配到的参数传递给视图函数
                1.分组匹配          --> 给视图函数传递位置参数
                2.分组命名匹配       --> 给视图函数传递关键字参数
            3.r'^$'         --> 只匹配域名/ip端口
            4.r''           --> 什么都能匹配
        3.路由命名和反向解析url
            1.视图函数中
                1.reverse
                    from django.urls import reverse
                    reverse('别名',args=(xx,xxx,xxxx))
                    reverse('别名',kwargs={'k1':'v1'})
            2.模板语言中
                {% url '别名' '参数1' %}

        4.二级路由和名称空间
            1.视图函数中
                 1.reverse
                    from django.urls import reverse
                    reverse('名称空间:别名',args=(xx,xxx,xxxx))
                    reverse('名称空间:别名',kwargs={'k1':'v1'})
            2.模板语言中
                {% url '名称空间:别名' '参数1' %}


    3.ORM
        1.ORM是什么？
            类      <-->  数据表
            属性    <-->   字段
            对象    <-->   数据行

        2.Django中如何使用ORM连接mysql
            1.手动新建一个数据库
            2.告诉Django连那个数据库
                1.在settings.py中配置DATABASES
                DATABASES = {
                    'default': {
                        'ENGINE': 'django.db.backends.mysql',
                        'NAME': 'day57',
                        'HOST': '127.0.0.1',
                        'PORT': 3306,
                        'USER': 'root',
                        'PASSWORD':'123456'
                    }
                }
            3.告诉Django用什么模块连接mysql
                1.在和settings.py同级的__init__.py中：
                    import pymysql
                    pymysql.install_as_MySQLdb()
            4.在app下面的models.py中创建类，类一定要继承models.Model
            5.执行两个命令
                1.python manage.py makemigrations   --> 判断models.py中是否有改动，把改动登记到小本本上
                2.python manage.py migrate          --> 把改动翻译成sql语句去数据库执行

        3.增删改查
            1.查询
                1.Publisher.objects.get(条件=值)     --> 查询结果有且只有一个才能用这个，返回的是一个pblisher_obj
                2.Publisher.objects.filter(条件=值)  --> 查询结果返回的是一个列表      *****
                3.Publisher.objects.all()           --> 查询结果返回的是列表，拿到数据表中所有的数据
            2.删
                1.Publisher.objects.get(条件=值).delete()
                2.Publisher.objects.filter(条件=值).delete()   *****
            3.增
                1.Publisher.objects.create(name='新值')
            4.改
                1.基于对象的修改
                    Publisher_obj = Publisher.objects.get(条件=值)
                    Publisher_obj.name = '新值'
                    Publisher_obj.save()
                2.基于QuerySet的update修改
                    Publisher.objects.filter(条件=值).update(name='新值')   *****
        4.外键(models.ForeignKey(to='表')，on_delete=models.CASCADE)
            1.外键的查询
                book_obj.publisher            --> ORM中帮我们实现的，直接找到和书关李娜的出版社对象
                book_obj.publisher_id         -->数据库中真正保存的字段
            2.外键的修改
                1.book_obj.publisher = publisher_obj
                  book_obj.save()
                2.book_obj.publisher_id = 1
                  book_obj.save()
            3.多对多(models.ManyToManyField(to='表'))
                1.查询
                    author_obj.book.all()           --> 返回一个书籍列表
                2.添加
                    author_obj.book.add(1,2)
                3.修改
                    author_obj.book.set([1,2])
                4.删除
                    author_obj.book.clear()
        6.常用字段
        7.常用字段的参数
        8.带choice参数的字段
            1.get_字段名_display()
        9.建表的元信息
            class Meta:
                db_table = '表名'
                unique_together(('ip','port'))
                index_together = (('pub_date','deadline'))
        10.必知必会13条
            1.返回QuerySet列表类型的
                1.filter()
                2.all()
                3.exclude()
                4.order_by()
                5.reverse()
                6.distinct()

                7.values()
                8.values_list()

            2.返回具体对象
                1.get()
                2.first()
                3.last()
            3.返回布尔值
                1.exists()
            4.返回数字的
                1.count()