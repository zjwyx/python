# re模块
# findall(正则，待匹配字符串.flag)：返回所有匹配项的列表
# serch：返回一个对象,通过group取到的是第一个匹配的项
# finditer：返回一个迭代器，通过迭代取到的是一个变量，通过group取值
# match：从头开始找第一个，其他和search一样

# compile(正则)：同一个正则表达式需要多次使用的时候提前编译来节省时间

# split：通过正则表达式匹配的内容进行分割
# sub：替换，通过郑泽表示匹配的内容进行替换
# subn：替换，在sub的基础上返回一个元组，第一个内容是替换结果，第二个内容是替换的次数



# 标签匹配
# <h1>dkalfjdsaf</h1><h2>dkafdkskf51561</h2>
# re.findall('<\w+>(.*?)</\w+>',exp)
# ret = re.search(r'<\w+>(.*?)</\w1>',exp)
# ret.group(2)


# 用户输入身份证号匹配
# ^[1-9]\d{14}(\d{2}[\dx])?$


# 分组命名 取消分组优先
# (?P<组名>正则)  (?P=组名)   (?:正则)



# 2.匹配年月日日期 格式2018-12-6
# [1-9]\d{3}-(1[0-2]|0?[1-9])-([12]\d||3[01]|0?[1-9])
# [1-9]\d{3}-(1[0-2]|0?[1-9])-([12]\d||3[01]|0?[1-9])
# [1-9]\d{3}(?P<sub>[^\d])(1[0-2]|0?[1-9])(?P=sub)([12]\d||3[01]|0?[1-9])


# 7.匹配邮箱地址
# 邮箱规则
# [-\w.]+@([-.\da-zA-Z]+\.)+[a-zA-Z\d]{2,6}


# 9题
# \([^()]+\)


# 10题
# \d+[*\]\d+
# 小数
# \d+(\.\d+)?[*\]\d+(\.\d+)?
