01 今日内容大纲
    1.global nonlocal
    2.函数名的运用
    3.新特性：格式化输出
    4.迭代器：
        可迭代对象
        获取对象的方法
        判断一个对象是否可迭代对象
        小结
        迭代器
        迭代器的定义
        判断一个对象是否是迭代器
        while循环模拟for循环机制
        小结
        可迭代对象与迭代器的对比

02 昨日内容回顾以及作业的讲解
    1.函数的参数
        1.实参角度：
            位置参数
            关键字参数
            混合参数
        2.形参角度
            位置参数
            默认参数
            万能参数  *args  **kwargs
            仅限关键字参数
        3.形参角度参数顺序：位置参数，*args 默认参数 仅限关键字参数 **kwargs
    2.*的魔性用法
        函数的定义时：代表聚合
        函数的调用时：代表打散
    3.python中存在三个空间
        内置名称空间：存储的内置函数：input，print....
        全局名称空间：py文件，存放的是py文件，（除去函数，类内部的）变量，函数名和函数的内存地址的关系
        局部名称空间：存放的函数内部的变量的对应关系
    4.加载顺序：内置 ---- 全局 ---- 局部（执行函数时）
    5.取值顺序：就近原则，LEGB
        1.局部作用域只能引用全局变量，不能修改
    6.作用域
        1.全局作用域：内置名称空间 + 全局名称空间
        2.局部作用域：局部名称空间
    7.函数的嵌套
    8.globals()  locals()（获取当前的名称空间）

03 今日内容
    1.global nonlocal
    2.函数名的运用
    3.新特性：格式化输出
    4.迭代器：
        1.可迭代对象
            字面意思：对象？python中一切皆对象，一个实实在在存在的值，对象
            可迭代？：更新迭代，重复的，循环的一个过程，更新迭代每次都有新的内容
                      可以进行循环更新的一个实实在在值
            专业角度：可迭代的对象？内部含有'__iter__'方法的对象，可迭代对象
            目前学过的可迭代对象？str list tuple dict set range 文件句柄

        2.获取对象的所有方法并且以字符串的形式表现：dir

        3.判断一个对象是否可迭代对象
            # s1 = 'fjsdsl'
            # l1 = [1,2,3]
            # print(dir(s1))
            # print(dir(l1))
            # print('__iter__' in dir(s1))
            # print('__iter__' in dir(range(10)))
        4.小结
            字面意思：可以进行循环更新的一个实实在在值
            专业角度：内部含有'___iter__'方法的对象，可迭代对象
            判断一个对象是不是可迭代对象：'__iter__' in dir(对象)
            str list tuple dict set range 文件句柄
            优点：
                1.存储的数据直接能显示，比较直观
                2.拥有的方法比较多，操作方便
            缺点：
                1.占用内存
                2.不能直接通过for循环，不能直接取值（索引，key）

        5.迭代器

        6.迭代器的定义
            字面意思：更新迭代，器：工具，可更新迭代的工具
            专业角度：内部含有'__iter__'方法并且含有'__next__'方法的对象就是迭代器
            可以判断是否是迭代器：'__iter__' and '__next__'在不在dir（对象）



        7.判断一个对象是否是迭代器
            with open('文件1',encoding='utf-8',mode='w') as f1:
            print('__iter__' in dir(f1) and '__next__' in dir(f1))

        8.迭代器的取值
            # l1 = [11,22,33,44,55,66]
            # # 转化成迭代器,形成了迭代器赋值给了obj
            # obj = iter(l1)
            # print(obj)
            # # 取值
            # print(next(obj))
            # print(next(obj))
            # print(next(obj))
            # print(next(obj))
            # print(next(obj))

        9.可迭代对象如何转化成迭代器
            iter([1,2,3])

        10.while循环模拟for循环机制
            l1 = [11,22,33,44,55,66,77,88,99,1111,1133,15652]
            # 将可迭代对象转化成迭代器
            # 利用while循环模拟for循环对可迭代对象进行取值的机制
            obj = iter(l1)
            while 1:
                try:
                    print(next(obj))
                except StopIteration:
                    break


        11.小结
             字面意思：更新迭代，器：工具，可更新迭代的工具
             专业角度：内部含有'__iter__'方法并且含有'__next__'方法的对象就是迭代器
             优点：
                节省内存
                惰性机制，next一次，取一个值
             缺点:
                速度慢
                不走回头路
        12.可迭代对象与迭代器的对比
            可迭代对象是一个操作方法比较多，比较直观，存储数据相对少（几百万个对象，8G内存是可以承受的）的一个数据集
            当你侧重于对于数据可以灵活处理，并且内存空间足够，将数据集设置为可迭代对象是明确的选择
            是一个非常节省内存，可以记录取值位置，可以直接通过循环+next方法取值，但是不直观，操作方法比较单一的数据集
            当你的数据量过大，大到足以撑爆你的内存或者你以节省内存为首首选因素时，将数据集设置为迭代器是一个不错的选择


04 今日总结
    1.默认参数的坑，作用域的坑   ***
    2.格式化输出  ***
    3.函数名的应用
    4.对比：迭代器是什么？迭代器的优缺点。可迭代对象转化成迭代器，next()取值

05 明日内容